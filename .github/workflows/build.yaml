name: Deploy Infrastructure and Configure AKS

# This workflow will run on pushes to the main branch and manual triggers
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login to Azure CLI using the Azure login action
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Setup kubectl for domain.sh script
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    # Install Kubelogin for domain.sh script
    - name: Install Kubelogin
      run: sudo az aks install-cli

    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Checkout Name.com webhook repo
      uses: actions/checkout@v4
      with:
        repository: imgrant/cert-manager-webhook-namecom
        path: webhook

    - name: List contents of webhook repo
      run: ls -la webhook


    # Login to DockerHub (optional, if pushing)
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build time-api Docker image
    - name: Build Docker image
      run: |
        docker build -t time-api:${{ github.sha }} -t time-api:latest .

    - name: Run container
      run: |
        docker run -d -p 5000:5000 --name time-api time-api:${{ github.sha }}

    - name: Wait for container to start
      run: |
        sleep 5

    - name: Test Flask app endpoint
      run: |
        curl --fail http://localhost:5000/time || (docker logs time-api && exit 1)

    - name: Push Docker image
      run: |
        docker tag time-api:${{ github.sha }} victorthegreat7/time-api:${{ github.sha }}
        docker tag time-api:${{ github.sha }} victorthegreat7/time-api:latest
        docker push victorthegreat7/time-api:${{ github.sha }}
        docker push victorthegreat7/time-api:latest

    # Check that the Azure account is logged in
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        inlineScript: |
          az account show

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Run bash scripts to prepare the backend for Terraform and authorize GitHub Actions runner IP to access the AKS cluster
    - name: Create Terraform Backend
      run: |
        chmod +x pre-apply.sh
        ./pre-apply.sh
      working-directory: ./terraform/bash_scripts

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init && terraform validate
      working-directory: ./terraform

    # Apply Terraform configuration
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        USER_OBJECT_ID: ${{ secrets.USER_OBJECT_ID }}
        USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
        TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
      run: terraform apply --auto-approve
      working-directory: ./terraform

    # Move deployment script to the terraform directory
    - name: Move deployment script
      run: |
        mv deploy.tf ..
      working-directory: ./terraform/api_deployments

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init && terraform validate
      working-directory: ./terraform

    # Apply Terraform configuration
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        USER_OBJECT_ID: ${{ secrets.USER_OBJECT_ID }}
        USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
        TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
      run: terraform apply --auto-approve
      working-directory: ./terraform

    # Get AKS Credentials for domain.sh script
    - name: Get AKS Credentials
      run: |
        RESOURCE_GROUP=$(terraform output -raw aks_resource_group | grep -v 'terraform-bin' | grep -v 'Terraform exited with code' | awk -F': ' '{print $2}' | grep -v '^0$')
        CLUSTER_NAME=$(terraform output -raw aks_cluster_name | grep -v 'terraform-bin' | grep -v 'Terraform exited with code' | awk -F': ' '{print $2}' | grep -v '^0$')

        az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
      working-directory: ./terraform
    
    # Authenticate with Kubelogin
    - name: Authenticate with Kubelogin
      run: |
        kubelogin convert-kubeconfig -l azurecli

    # Run bash script to add A record
    - name: Add A record
      env:
        USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
        TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
        DOMAIN: ${{ secrets.DOMAIN }}
      run: |
        chmod +x up_A_record.sh
        ./up_A_record.sh
      working-directory: ./terraform/bash_scripts
    
    - name: Wait for container to start
      run: |
        sleep 180

    - name: Check if API endpoint (api.mywonder.works/time) works
      run: |
        curl https://api.mywonder.works/time
name: Deploy Infrastructure and Configure AKS

on:
  push:
    branches: # This workflow will only run on pushes to the main branch
      - main

# on:
#   workflow_dispatch: # This allows manual triggering of the workflow from the GitHub Actions tab

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    # This job runs on the latest version of Ubuntu
    runs-on: ubuntu-latest

    steps:
    # Login to Azure CLI using the Azure login action
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # This step is used to check the Azure account that is logged in
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.2

    # Cache Terraform plugins to speed up the workflow
    - name: Cache Terraform plugins
      uses: actions/cache@v3
      with:
        path: ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    # Run bash scripts to prepare the backend for Terraform and authorized current IP to access the AKS cluster
    - name: Run inline bash script
      run: |
        chmod +x pre-apply.sh
        chmod +x runner_ip.sh
        ./pre-apply.sh
        ./runner_ip.sh
        cat main.tf
      working-directory: ./terraform

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init
      working-directory: ./terraform

    # Apply Terraform configuration
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform apply --auto-approve
      working-directory: ./terraform

    # # Setup kubectl
    # - name: Setup kubectl
    #   uses: azure/setup-kubectl@v3
    #   with:
    #     version: 'v1.30.3'

    # # Install Kubelogin
    # - name: Install Kubelogin
    #   run: sudo az aks install-cli

    # # Get AKS Credentials
    # - name: Get AKS Credentials
    #   env:
    #     RESOURCE_GROUP: k8s-cluster-rg
    #     CLUSTER_NAME: timeapi-cluster
    #   run: |
    #     az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
    #   working-directory: ./terraform
    
    # # Authenticate with Kubelogin
    # - name: Authenticate with Kubelogin
    #   run: |
    #     kubelogin convert-kubeconfig -l azurecli

    # # Run bash script to configure the domain
    # - name: Run inline bash script
    #   env:
    #     USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
    #     TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
    #     DOMAIN: ${{ secrets.DOMAIN }}
    #   run: |
    #     chmod +x domain.sh
    #     ./domain.sh
    #   working-directory: ./terraform

    # Clean up
    - name: Clean up
      if: always()
      run: rm -f vault_password.txt
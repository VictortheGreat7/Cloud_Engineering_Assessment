name: Deploy Infrastructure and Configure AKS

# This workflow will run on pushes to the main branch and manual triggers
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write  # Changed from 'read' to 'write' to allow pushing

jobs:
  # create-infrastructure:
  #   runs-on: ubuntu-latest

  #   steps:
  #   # Login to Azure CLI using the Azure login action
  #   - uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   # This step checks that the Azure account is logged in
  #   - name: Azure CLI script
  #     uses: azure/cli@v2
  #     with:
  #       azcliversion: latest
  #       inlineScript: |
  #         az account show

  #   # Checkout the repository
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   # Setup Terraform
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2
  #     with:
  #       terraform_version: 1.11.3

  #   # Move deployment scripts to the correct directory
  #   - name: Move deployment scripts
  #     run: |
  #       mv * ..
  #     working-directory: ./terraform/api_deployments

  #   # Run bash scripts to prepare the backend for Terraform and authorize GitHub Actions runner IP to access the AKS cluster
  #   - name: Create Terraform Backend
  #     run: |
  #       chmod +x pre-apply.sh
  #       ./pre-apply.sh
  #     working-directory: ./terraform

  #   # Initialize Terraform
  #   - name: Terraform Init
  #     env:
  #       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  #       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  #       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  #       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  #     run: terraform init
  #     working-directory: ./terraform

  #   # Apply Terraform configuration
  #   - name: Terraform Apply
  #     env:
  #       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  #       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  #       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  #       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  #     run: terraform apply --auto-approve
  #     working-directory: ./terraform

  deploy:
    runs-on: ubuntu-latest
    # needs: create-infrastructure

    steps:
      # Login to Azure CLI using the Azure login action
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # This step checks that the Azure account is logged in
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.3

    # Move deployment scripts to the correct directory
    - name: Move deployment scripts
      run: |
        mv * ..
      working-directory: ./terraform/api_deployments

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init
      working-directory: ./terraform

    # # Apply Terraform configuration
    # - name: Terraform Apply
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #   run: terraform apply --auto-approve
    #   working-directory: ./terraform

    # Setup kubectl for domain.sh script
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.30.3'

    # Install Kubelogin for domain.sh script
    - name: Install Kubelogin
      run: sudo az aks install-cli

    # Get AKS Credentials for domain.sh script
    - name: Get AKS Credentials
      run: |
        RESOURCE_GROUP=$(terraform output -raw aks_resource_group | grep -v 'terraform-bin' | grep -v 'Terraform exited with code' | awk -F': ' '{print $2}' | grep -v '^0$')
        CLUSTER_NAME=$(terraform output -raw aks_cluster_name | grep -v 'terraform-bin' | grep -v 'Terraform exited with code' | awk -F': ' '{print $2}' | grep -v '^0$')
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
      working-directory: ./terraform
    
    # Authenticate with Kubelogin
    - name: Authenticate with Kubelogin
      run: |
        kubelogin convert-kubeconfig -l azurecli

    # Run bash script to configure the domain
    - name: Run inline bash script
      env:
        USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
        TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
        DOMAIN: ${{ secrets.DOMAIN }}
      run: |
        NAMESERVERS=$(terraform output -json name_servers)

        export AZURE_NS1=$(echo "$NAMESERVERS" | grep -oP '"\K[^"]+(?=")' | head -n 1 | sed 's/,//; s/\.$//')
        echo $AZURE_NS1
        export AZURE_NS2=$(echo "$NAMESERVERS" | grep -oP '"\K[^"]+(?=")' | head -n 3 | tail -n 1 | sed 's/,//; s/\.$//')
        echo $AZURE_NS2
        export AZURE_NS3=$(echo "$NAMESERVERS" | grep -oP '"\K[^"]+(?=")' | head -n 5 | tail -n 1 | sed 's/,//; s/\.$//')
        echo $AZURE_NS3
        export AZURE_NS4=$(echo "$NAMESERVERS" | grep -oP '"\K[^"]+(?=")' | head -n 7 | tail -n 1 | sed 's/,//; s/\.$//')
        echo $AZURE_NS4

        chmod +x domain.sh
        ./domain.sh
      working-directory: ./terraform

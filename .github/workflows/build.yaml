name: Deploy Infrastructure and Configure AKS

# This workflow will run on pushes to the main branch and manual triggers
on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Login to Azure CLI using the Azure login action
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # This step checks that the Azure account is logged in
    - name: Azure CLI script
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show

    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.2

    # Run bash scripts to prepare the backend for Terraform and authorize GitHub Actions runner IP to access the AKS cluster
    - name: Run inline bash script
      run: |
        chmod +x pre-apply.sh
        chmod +x runner_ip.sh
        ./pre-apply.sh
        ./runner_ip.sh
      working-directory: ./terraform

    # Initialize Terraform
    - name: Terraform Init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init
      working-directory: ./terraform

    # # Cache Terraform plugins and modules
    # - name: Cache Terraform Plugins and Modules
    #   uses: actions/cache@v4
    #   with:
    #     path: |
    #       ~/.terraform.d/plugins
    #       .terraform/providers
    #     key: |
    #       terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
    #     restore-keys: |
    #       terraform-${{ runner.os }}-

    # Apply Terraform configuration
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform apply --auto-approve
      working-directory: ./terraform

    # Setup kubectl for domain.sh script
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.30.3'

    # Install Kubelogin for domain.sh script
    - name: Install Kubelogin
      run: sudo az aks install-cli

    - name: Set environment variables
      run: |
        echo "CLUSTER_NAME=$(terraform output -json | jq -r '.aks_cluster_name.value')" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=$(terraform output -json | jq -r '.aks_resource_group.value')" >> $GITHUB_ENV
      working-directory: ./terraform

    # Get AKS Credentials for domain.sh script
    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
      working-directory: ./terraform
    
    # Authenticate with Kubelogin
    - name: Authenticate with Kubelogin
      run: |
        kubelogin convert-kubeconfig -l azurecli
      working-directory: ./terraform

    # Run bash script to configure the domain
    - name: Run inline bash script
      env:
        USERNAME: ${{ secrets.DOMAIN_API_USERNAME }}
        TOKEN: ${{ secrets.DOMAIN_API_TOKEN }}
        DOMAIN: ${{ secrets.DOMAIN }}
      run: |
        chmod +x domain.sh
        ./domain.sh
      working-directory: ./terraform

    # Clean up
    - name: Clean up
      if: always()
      run: rm -f vault_password.txt
name: Provision Infrastructure and Deploy API

# This workflow will run on pushes to the main branch and manual triggers
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  provision-runner:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current Github repository
        uses: actions/checkout@v4

      # Build, test, and push Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build time-api Docker image
        run: |
          docker build -t time-api:${{ github.sha }} -t time-api:latest .

      - name: Test run container
        run: |
          docker run -d -p 5000:5000 --name time-api time-api:${{ github.sha }}

      - name: Wait for container to start
        run: |
          sleep 5

      - name: Test Flask app endpoint
        run: |
          curl --fail http://localhost:5000/time || (docker logs time-api && exit 1)

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag time-api:${{ github.sha }} victorthegreat7/time-api:${{ github.sha }}
          docker tag time-api:${{ github.sha }} victorthegreat7/time-api:latest
          docker push victorthegreat7/time-api:${{ github.sha }}
          docker push victorthegreat7/time-api:latest

      # Provision Self-Hosted Runner VM
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Login to Microsoft Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Confirm/create Terraform Backend
        run: |
          chmod +x pre-apply.sh
          ./pre-apply.sh
        working-directory: ./terraform/bash_scripts

      # Deploy microservice to provisioned infrastructure
      - name: Initialize and validate Terraform configuration
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: terraform init && terraform validate
        working-directory: ./terraform

      - name: Apply Terraform configuration
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          USER_OBJECT_ID: ${{ secrets.MY_USER_OBJECT_ID }}
        run: |
          cat <<EOF > terraform.tfvars.json
          {
            "my_user_object_id": "$USER_OBJECT_ID"
          }
          EOF

          terraform apply --auto-approve
        working-directory: ./terraform

      - name: Wait for VM to be ready
        run: |
          echo "Waiting for runner VM to be ready..."
          sleep 180

  build:
    runs-on: self-hosted

    steps:

    # Checkout the repository on the runner
    - name: Checkout current Github repository
      uses: actions/checkout@v4

    - name: Move /deploy contents to /terraform
      run: |
        mv deploy/* .
      working-directory: ./terraform

    # Provision cloud infrastructure and deploy microservice to provisioned infrastructure
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Login to Microsoft Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Confirm/create Terraform Backend
      run: |
        chmod +x pre-apply.sh
        ./pre-apply.sh
      working-directory: ./terraform/bash_scripts

    # Deploy microservice to provisioned infrastructure
    - name: Initialize and validate Terraform configuration
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform init && terraform validate
      working-directory: ./terraform

    - name: Apply Terraform configuration
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        USER_OBJECT_ID: ${{ secrets.MY_USER_OBJECT_ID }}
      run: |
        cat <<EOF > terraform.tfvars.json
        {
          "my_user_object_id": "$USER_OBJECT_ID"
        }
        EOF

        terraform apply --auto-approve
      working-directory: ./terraform
